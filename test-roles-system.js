// Script para testar e aplicar o sistema de roles via API
const { updateDatabaseWithRoles } = require('./update-roles-database');

async function testRolesSystem() {
  try {
    console.log('üîÑ Testando sistema de roles...');
    
    // Testar se o servidor est√° rodando
    const fetch = require('node-fetch');
    
    try {
      const response = await fetch('http://localhost:3001/dashboard');
      console.log('‚úÖ Servidor backend est√° rodando na porta 3001');
    } catch (error) {
      console.log('‚ùå Servidor backend n√£o est√° rodando');
      return;
    }
    
    // As roles ser√£o aplicadas quando o usu√°rio fizer login
    console.log('üìã Sistema de roles configurado:');
    console.log('   ‚Ä¢ ADMIN: Acesso total ao sistema');
    console.log('   ‚Ä¢ MANAGER: Gest√£o de clientes, servi√ßos e recontatos');
    console.log('   ‚Ä¢ USER: Acesso b√°sico para opera√ß√µes do dia-a-dia');
    
    console.log('\nüéØ Para aplicar as roles:');
    console.log('   1. Fa√ßa login no sistema com Google OAuth');
    console.log('   2. O primeiro usu√°rio ser√° automaticamente promovido a ADMIN');
    console.log('   3. Use as rotas /admin/* para gerenciar usu√°rios e roles');
    
    console.log('\nüîó Rotas de administra√ß√£o dispon√≠veis:');
    console.log('   GET /admin/users - Listar usu√°rios');
    console.log('   PUT /admin/users/:id/role - Alterar role de usu√°rio');
    console.log('   PUT /admin/users/:id/status - Ativar/desativar usu√°rio');
    console.log('   GET /admin/roles - Listar roles e permiss√µes');
    console.log('   GET /admin/stats - Estat√≠sticas do sistema');

  } catch (error) {
    console.error('‚ùå Erro ao testar sistema de roles:', error);
  }
}

testRolesSystem();
